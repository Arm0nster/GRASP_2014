#include <stdio.h>
#include <stdlib.h>

#include <GL/glew.h>

#include <glfw3.h>

#include <glm/glm.hpp>

#include <common/shader.hpp>
#include <glm/gtc/matrix_transform.hpp>

#include <stdlib.h>

using namespace glm;

GLuint loadBMP_custom(const char* imagepath){
    unsigned char header[54];
    unsigned int data_pos;
    unsigned int width, height;
    unsigned int image_size;
    unsigned char* data;

    FILE *file  = fopen(imagepath, "rb");
    if (!file) {
        printf("Couldn't read the file yo\n");
        return 0;
    }

    if (fread(header, 1, 54, file) != 54) {
        printf("Not a correct BMP file dude\n");
        return false;
    }

    if (header[0] != 'B' || header[1] != 'M') {
        printf("Not a correct BMP file dude\n");
        return false;
    }

    data_pos = *(int*)&(header[0x0A]);
    image_size = *(int*)&(header[0x22]);
    width = *(int*)&(header[0x12]);
    height = *(int*)&(header[0x16]);

    if (image_size == 0) image_size = width*height*3;
    if (data_pos == 0) data_pos = 54;

    data = new unsigned char[image_size];

    fread(data, 1, image_size, file);
    fclose(file);

    // create an OpenGL texture
    GLuint texture_id;
    glGenTextures(1, &texture_id);

    // all future texture functions will modify this texture
    glBindTexture(GL_TEXTURE_2D, texture_id);

    // give the image to OpenGL
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_BGR, 
            GL_UNSIGNED_BYTE, data);

    delete [] data;

    // boo filtering
    // glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    // glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    
    // chill trilinear filtering
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR); 
	glGenerateMipmap(GL_TEXTURE_2D);

    return texture_id;
}


int main(){

    //*********************************************************
    // Boilerplate
    //********************************************************* 
    if (!glfwInit()) {
        fprintf(stderr, "Failed to initialize glfw!\n");
        return -1;
    }

    glfwWindowHint(GLFW_SAMPLES, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    GLFWwindow* window;
    window = glfwCreateWindow(1024, 768, "BEAR PLAYGROUND", NULL, NULL);
    if (window == NULL) {
        fprintf(stderr, "Failed to open GLFW window!\n");
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);

    glewExperimental=true;
    if (glewInit() != GLEW_OK) {
        fprintf(stderr, "Failed to initialize glew!\n");
        return -1;
    }

    //***********************************************************
    //***********************************************************

    // Background
    glClearColor(1.0f, 1.0f, 1.0f, 0.0f);

    // fix depth issue with triangles
    glEnable(GL_DEPTH_TEST);
    // accept fragment if it is close to the camera than the former one
    glDepthFunc(GL_LESS);

    // Vertex Array Object (VAO)
    GLuint vertex_array_id;
    glGenVertexArrays(1, &vertex_array_id);
    glBindVertexArray(vertex_array_id);

    // load shaders
    GLuint program_id = LoadShaders("simple_vertex_shader.glsl",
            "simple_fragment_shader.glsl");

    // Using transforms
    //
    // glm::mat4 trans = glm::translate(10.0f, 0.0f, 0.0f);
    // glm::vec4 v_hat(10.0f, 10.0f, 10.0f, 0.0f);;
    // glm::vec4 v_transformed = trans * v_hat;
    //
    // Identity Matrix
    // glm::mat4 identity_matrix = glm::mat4(1.0f)
    //
    // Scaling Matrix
    // glm::mat4 scaling_matrix = glm::scale(2.0f, 2.0f, 2.0f)
    //
    // Rotation
    // glm::vec3 rotation_axis(??, ??, ??);
    // glm::mat4 rotation_matrix = glm::rotate (angle_in_degrees, rotation_axis);
    //
    // Putting it all together
    // TransformedVector = TranslationMatrix * RotationMatrix * ScaleMatrix * OriginalVector;
    //
    // get uniform handle
    GLuint matrix_id = glGetUniformLocation(program_id, "MVP");

    glm::mat4 projection = glm::perspective(
            45.0f,                  // 45 degree field of view
            4.0f / 3.0f,            // 4:3 aspect ratio == 800:600 == 1280:960
            0.1f,                   // near clipping plane. keep large
            100.0f);                // far clipping plane. keep small
   
    glm::mat4 view = glm::lookAt(
            glm::vec3(4, 3, -3),     // camera position
            glm::vec3(0, 0, 0),     // camera target
            glm::vec3(0, 1, 0));    // up vector

    // use identity matrix because our model is in the standard world coord.
    glm::mat4 model = glm::mat4(1.0f);

    glm::mat4 mvp = projection * view * model;

    // load texture
    GLuint texture = loadBMP_custom("./uvtemplate.bmp");


    //**********************************************************
    // Buffers
    //**********************************************************

    static const GLfloat g_vertex_buffer_data[] = {
        -1.0f,-1.0f,-1.0f, // triangle 1 : begin
        -1.0f,-1.0f, 1.0f,
        -1.0f, 1.0f, 1.0f, // triangle 1 : end
        1.0f, 1.0f,-1.0f, // triangle 2 : begin
        -1.0f,-1.0f,-1.0f,
        -1.0f, 1.0f,-1.0f, // triangle 2 : end
        1.0f,-1.0f, 1.0f,
        -1.0f,-1.0f,-1.0f,
        1.0f,-1.0f,-1.0f,
        1.0f, 1.0f,-1.0f,
        1.0f,-1.0f,-1.0f,
        -1.0f,-1.0f,-1.0f,
        -1.0f,-1.0f,-1.0f,
        -1.0f, 1.0f, 1.0f,
        -1.0f, 1.0f,-1.0f,
        1.0f,-1.0f, 1.0f,
        -1.0f,-1.0f, 1.0f,
        -1.0f,-1.0f,-1.0f,
        -1.0f, 1.0f, 1.0f,
        -1.0f,-1.0f, 1.0f,
        1.0f,-1.0f, 1.0f,
        1.0f, 1.0f, 1.0f,
        1.0f,-1.0f,-1.0f,
        1.0f, 1.0f,-1.0f,
        1.0f,-1.0f,-1.0f,
        1.0f, 1.0f, 1.0f,
        1.0f,-1.0f, 1.0f,
        1.0f, 1.0f, 1.0f,
        1.0f, 1.0f,-1.0f,
        -1.0f, 1.0f,-1.0f,
        1.0f, 1.0f, 1.0f,
        -1.0f, 1.0f,-1.0f,
        -1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f,
        -1.0f, 1.0f, 1.0f,
        1.0f,-1.0f, 1.0f
    };

    GLuint vertex_buffer;
    glGenBuffers(1, &vertex_buffer);
    glBindBuffer(GL_ARRAY_BUFFER, vertex_buffer);
    glBufferData(GL_ARRAY_BUFFER,
            sizeof(g_vertex_buffer_data),
            g_vertex_buffer_data,
            GL_STATIC_DRAW);

    static const GLfloat g_uv_buffer_data[] = {
        0.000059f, 1.0f-0.000004f,
        0.000103f, 1.0f-0.336048f,
        0.335973f, 1.0f-0.335903f,
        1.000023f, 1.0f-0.000013f,
        0.667979f, 1.0f-0.335851f,
        0.999958f, 1.0f-0.336064f,
        0.667979f, 1.0f-0.335851f,
        0.336024f, 1.0f-0.671877f,
        0.667969f, 1.0f-0.671889f,
        1.000023f, 1.0f-0.000013f,
        0.668104f, 1.0f-0.000013f,
        0.667979f, 1.0f-0.335851f,
        0.000059f, 1.0f-0.000004f,
        0.335973f, 1.0f-0.335903f,
        0.336098f, 1.0f-0.000071f,
        0.667979f, 1.0f-0.335851f,
        0.335973f, 1.0f-0.335903f,
        0.336024f, 1.0f-0.671877f,
        1.000004f, 1.0f-0.671847f,
        0.999958f, 1.0f-0.336064f,
        0.667979f, 1.0f-0.335851f,
        0.668104f, 1.0f-0.000013f,
        0.335973f, 1.0f-0.335903f,
        0.667979f, 1.0f-0.335851f,
        0.335973f, 1.0f-0.335903f,
        0.668104f, 1.0f-0.000013f,
        0.336098f, 1.0f-0.000071f,
        0.000103f, 1.0f-0.336048f,
        0.000004f, 1.0f-0.671870f,
        0.336024f, 1.0f-0.671877f,
        0.000103f, 1.0f-0.336048f,
        0.336024f, 1.0f-0.671877f,
        0.335973f, 1.0f-0.335903f,
        0.667969f, 1.0f-0.671889f,
        1.000004f, 1.0f-0.671847f,
        0.667979f, 1.0f-0.335851f
    };

    GLuint uvbuffer;
    glGenBuffers(1, &uvbuffer);
    glBindBuffer(GL_ARRAY_BUFFER, uvbuffer);
    glBufferData(GL_ARRAY_BUFFER, sizeof(g_uv_buffer_data), g_uv_buffer_data, GL_STATIC_DRAW);

    //**************************************************************
    //**************************************************************



    glfwSetInputMode(window, GLFW_STICKY_KEYS, GL_TRUE);
    do {

        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        glUseProgram(program_id);

        // send transform to currently bound shader
        glUniformMatrix4fv(matrix_id, 1, GL_FALSE, &mvp[0][0]);

        // primary attribute
        glEnableVertexAttribArray(0);
        glBindBuffer(GL_ARRAY_BUFFER, vertex_buffer);
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, (void*)0);

        // secondary attribute
        glEnableVertexAttribArray(1);
        glBindBuffer(GL_ARRAY_BUFFER, uvbuffer);
        glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, (void*)0);

        glDrawArrays(GL_TRIANGLES, 0, 12*3);
        glDisableVertexAttribArray(0);


        glfwSwapBuffers(window);
        glfwPollEvents();

    } while (glfwGetKey(window, GLFW_KEY_ESCAPE) != GLFW_PRESS && \
            glfwWindowShouldClose(window) == 0);

}
